{"version":3,"sources":["users.js"],"names":[],"mappings":"AAAA,YAAY,CAAA;;AAEZ,IAAI,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAA;AAClC,IAAI,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAA;AACnC,IAAI,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,UAAU,CAAC,CAAA;AACzC,IAAI,WAAW,GAAG,OAAO,CAAC,aAAa,CAAC,CAAA;AACxC,IAAI,OAAO,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AAClC,IAAI,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;AACpD,IAAI,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC1B,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACvB,IAAI,MAAM,GAAG,OAAO,CAAC,UAAU,CAAC,CAAA;AAChC,IAAI,gBAAgB,GAAG,EAAE,CAAA;;AAEzB,IAAI,IAAI,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAA;AACvC,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAA;AACpB,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAA;;AAId,OAAO,CAAC,OAAO,GAAG,WAAW,KAAK,EAAC;AAC/B,UAAM,CAAC,OAAO,CAAC,gBAAgB,EAAE,UAAS,GAAG,EAAE,IAAI,EAAE;AACjD,YAAI,GAAG,EAAE,OAAO,IAAI,CAAC,GAAG,CAAC,CAAA;AACzB,cAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,EAAE,UAAS,GAAG,EAAE,IAAI,EAAE;AAClD,gBAAI,GAAG,EAAE,OAAO,IAAI,CAAC,GAAG,CAAC,CAAA;AACzB,iBAAK,CAAC,QAAQ,GAAG,IAAI,CAAA;AACrB,mBAAO,KAAK,CAAA;SACf,CAAC,CAAA;KACL,CAAC,CAAA;CACL,CAAA;;AAGD,OAAO,CAAC,QAAQ,GAAG,WAAW,KAAK,EAAC,KAAK,EAAE;AACvC,QAAI,IAAI,GAAG,KAAK,CAAA;AAChB,QAAI,GAAG,GAAG,CAAC,CAAC,KAAK,CAAC,6CAA6C,EAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAA;AAC5E,QAAG,GAAG,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,EAAC;AACrB,cAAM,CAAC,CAAC,KAAK,CAAC,8CAA8C,EAAC,CAAC,IAAI,IAAI,EAAE,EAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAA;KACvF,MAAK;AACF,YAAI,GAAG,GAAG,MAAM,CAAC,CAAC,KAAK,CAAC,mEAAmE,EAAC,CAAC,IAAI,CAAC,IAAI,EAAC,IAAI,CAAC,QAAQ,EAAC,IAAI,IAAI,EAAE,EAAC,IAAI,IAAI,EAAE,CAAC,CAAC,CAAA;AAC5I,YAAI,OAAO,GAAG;AACV,cAAE,EAAC,GAAG,CAAC,QAAQ;AACf,gBAAI,EAAC,IAAI,CAAC,IAAI;SACjB,CAAA;AACD,eAAO,OAAO,CAAA;KACjB;CACJ,CAAA","file":"users-compiled.js","sourcesContent":["'use strict'\r\n\r\nvar mongoose = require('mongoose')\r\nvar Movie = mongoose.model('Movie')\r\nvar Category = mongoose.model('Category')\r\nvar koa_request = require('koa-request')\r\nvar Promise = require('bluebird');\r\nvar request = Promise.promisify(require('request'));\r\nvar _ = require('lodash');\r\nvar co = require('co');\r\nvar bcrypt = require('bcryptjs')\r\nvar SALT_WORK_FACTOR = 10\r\n\r\nvar conf = require('../../config/conf')\r\nvar pool = conf.pool\r\nvar p = conf.p\r\n\r\n\r\n\r\nexports.preSave = function *(_user){\r\n    bcrypt.genSalt(SALT_WORK_FACTOR, function(err, salt) {\r\n        if (err) return next(err)\r\n        bcrypt.hash(_user.password, salt, function(err, hash) {\r\n            if (err) return next(err)\r\n            _user.password = hash\r\n            return _user\r\n        })\r\n    })\r\n}\r\n\r\n\r\nexports.saveUser = function *(_user,_this) {\r\n    var user = _user\r\n    var res = p.query('select id from users where name = ? limit 1',[user.name])\r\n    if(res && res.length > 0){\r\n        yield p.query('update users set updateAt = ? where name = ?',[new Date(),user.name])\r\n    }else {\r\n        var res = yield p.query('insert into users(name,password,createAt,updateAt) value(?,?,?,?)',[user.name,user.password,new Date(),new Date()])\r\n        var newUser = {\r\n            id:res.insertId,\r\n            name:user.name\r\n        }\r\n        return newUser\r\n    }\r\n}\r\n"]}